using System.Net.Mime;
using ElixirControlPlatform.API.CustomerManagement.Domain.Model.Queries;
using ElixirControlPlatform.API.CustomerManagement.Domain.Services;
using ElixirControlPlatform.API.CustomerManagement.Interfaces.REST.Resources;
using ElixirControlPlatform.API.CustomerManagement.Interfaces.REST.Transform;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;


namespace ElixirControlPlatform.API.CustomerManagement.Interfaces.REST;

/// <summary>
/// Clients Controller
/// </summary>
/// <param name="clientCommandService">The <see cref="IClientCommandService"/></param>
/// <param name="clientQueryService">The <see cref="IClientQueryService"/></param>
[ApiController]
[Route("api/v1/[controller]")]
[Produces(MediaTypeNames.Application.Json)]
[Tags("Clients")]
public class ClientsController(
    IClientCommandService clientCommandService,
    IClientQueryService clientQueryService
    ) : ControllerBase

{
    
    /// <summary>
    /// Create a new client
    /// </summary>
    /// <param name="resource">The <see cref="CreateClientResource"/></param>
    /// <returns>
    /// The <see cref="ActionResult"/> of the request containing the <see cref="ClientResource"/> resource
    /// </returns>
    [HttpPost]
    [SwaggerOperation(
        Summary = "Create a new client",
        Description = "Creates a new client",
        OperationId = "CreateClient")]
    [SwaggerResponse(StatusCodes.Status201Created, "The client was created", typeof(ClientResource))]
    [SwaggerResponse(StatusCodes.Status400BadRequest, "The client could not be created")]
    public async Task<ActionResult> CreateClient([FromBody] CreateClientResource resource)
    {
        var createClientCommand = 
            CreateClientCommandFromResourceAssembler.ToCommandFromResource(resource);
        var result = await clientCommandService.Handle(createClientCommand);
        if (result is null) return BadRequest();
        return CreatedAtAction(nameof(GetClientById), new {id = result.Id},
            ClientResourceFromEntityAssembler.ToResourceFromEntity(result));
    }

    /// <summary>
    /// Get a client by id
    /// </summary>
    /// <param name="id">The client ID generated by this API</param>
    /// <returns>
    /// The <see cref="ActionResult"/> of the request containing the <see cref="ClientResource"/> resource for the given ID
    /// </returns>
    [HttpGet("{id}")]
    [SwaggerOperation(
        Summary = "Get a client by id",
        Description = "Gets a client by id",
        OperationId = "GetClient")]
    [SwaggerResponse(StatusCodes.Status200OK, "The client was found", typeof(ClientResource))]
    [SwaggerResponse(StatusCodes.Status404NotFound, "The client was not found")]
    public async Task<ActionResult> GetClientById(int id)
    {
        var getClientByIdQuery = new GetClientByIdQuery(id);
        var result = await clientQueryService.Handle(getClientByIdQuery);
        if (result is null) return NotFound();
        var resource = ClientResourceFromEntityAssembler.ToResourceFromEntity(result);
        return Ok(resource);
    }
    
    

    /// <summary>
    /// Get clients by dni
    /// </summary>
    /// <param name="dni">
    /// The dni to get all clients for
    /// </param>
    /// <returns>
    /// The <see cref="ActionResult"/> of the request containing the <see cref="ClientResource"/> resources for the given dni
    /// </returns>
    [HttpGet("{dni}/client")]
    [SwaggerOperation(
        Summary = "Get clients by dni",
        Description = "Gets clients by dni",
        OperationId = "GetClientsByDni")]
    public async Task<ActionResult> GetClientsFromQuery(string dni)
    {
        return await GetClientsByDni(dni);
    }
    /// <summary>
    /// Get all clients by dni
    /// </summary>
    /// <param name="dni">
    /// The dni to get all clients for
    /// </param>
    /// <returns>
    /// The <see cref="ActionResult"/> of the request containing the <see cref="ClientResource"/> resources for the given dni
    /// </returns>
    private async Task<ActionResult> GetClientsByDni(string dni)
    {
        
        var getAllClientsByDniQuery = new GetAllClientsByDniQuery(dni);
        
        var result = await clientQueryService.Handle(getAllClientsByDniQuery);
        if(result is null) return NotFound();
        var resources = ClientResourceFromEntityAssembler.ToResourceFromEntity(result);
        return Ok(resources);
    }
    
    
    /// <summary>
    /// Get all clients
    /// </summary>
    /// <returns>
    /// The <see cref="ActionResult"/> of the request containing the <see cref="ClientResource"/> resources for all clients
    /// </returns>
    [HttpGet]
    [SwaggerOperation(
        Summary = "Get all clients",
        Description = "Gets a list of all clients",
        OperationId = "GetAllClients")]
    public async Task<ActionResult> GetAllClients()
    {
        var query = new GetAllClientsQuery();
        var clients = await clientQueryService.Handle(query);
        var resources = clients.Select(ClientResourceFromEntityAssembler.ToResourceFromEntity);
        return Ok(resources);
    }

}